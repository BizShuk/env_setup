#!/bin/bash

genpasswd() {
    local l=$1
    [ "$l" == "" ] && l=16
    tr -dc A-Za-z0-9_ </dev/urandom | head -c ${l} | xargs
}

# git env variable
# for more detail check: [Git Internal Environment Variables](https://git-scm.com/book/en/v2/Git-Internals-Environment-Variables)
git_trace_on() {
    export GIT_TRACE = 1
    export GIT_CURL_VERBOSE = 1
}

git_trace_off() {
    unset GIT_TRACE
    unset GIT_CURL_VERBOSE
}

gotest() {
    go test --covermode=count --coverprofile=out/conver.out ./... && go tool cover -func=out/cover.out
}

load_nvm() {
    export NVM_DIR=~/.nvm
    [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
}

exit_on_error() {
    exit_code=$1
    last_command=${@:2}
    if [ $exit_code -ne 0 ]; then
        echo >&2 "\"${last_command}\" command failed with exit code ${exit_code}."
        exit $exit_code
    fi
}


# https://gist.github.com/phemmer/e943dce38eaa948f1893d9392741970f
function _run_deferred() {
    local _depth="$BASHPID.${#FUNCNAME[@]}"
    [[ "$_depth" != "$_deferred_depth" ]] && return
    local opt=$-
    set +e
    for ((i = ${#_deferred[@]} - 1; i >= 0; i--)); do
        eval "${_deferred[i]}"
    done
    [[ "$opt" == *e* ]] && set -e
}
function _defer() {
    _deferred_depth="$BASHPID.${#FUNCNAME[@]}"
    _deferred+=("$(printf '%q ' "$@")")
}
# This has to be an alias so that the `trap ... RETURN` runs appropriately.
shopt -s expand_aliases
alias defer='declare -a _deferred; declare _deferred_depth; trap _run_deferred EXIT RETURN; _defer'

